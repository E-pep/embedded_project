/*
 * functies.c
 *
 *  Created on: 6-jun.-2017
 *      Author: paull
 */

#include "functies.h"
#include "startscherm.h"

static uint8_t juist = 0;

void vFunctiesInitLCD( void )
{
  /* LCD Initialization */
  BSP_LCD_Init();
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
  /* Enable the LCD */
  BSP_LCD_DisplayOn();
  /* Select the LCD vFunctiesBackground Layer  */
  BSP_LCD_SelectLayer(0);
  /* Clear the vFunctiesBackground Layer */
  BSP_LCD_Clear(LCD_COLOR_RED);
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
  BSP_TS_Init(480,272);
  WDA_LCD_DrawBitmap(SLIMSTEMENS_DATA,0,0,SLIMSTEMENS_DATA_X_PIXEL,SLIMSTEMENS_DATA_Y_PIXEL,SLIMSTEMENS_DATA_FORMAT);

  BSP_LCD_SetFont(&Font20);


}

void vFunctiesBackground( void )
{
	  WDA_LCD_DrawBitmap(SLIMSTEMENS_DATA,0,0,SLIMSTEMENS_DATA_X_PIXEL,SLIMSTEMENS_DATA_Y_PIXEL,SLIMSTEMENS_DATA_FORMAT);

}


err_t imageOntvangen(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{



		static int flag = 0;
		static uint16_t data[6000];
		static uint16_t receivedLen = 0;
		struct pbuf * buffer = p;
		static int teller = 0;
		static int juist_a;
		int i;



		//char test2 = ((char*)buffer->payload)[0];
		//char test3 = ((char*)buffer->payload)[1];
		uint16_t lengte = buffer->len;

		for(i = 0; i<lengte-1;i += 2)
		{
			char get1 = ((char*)buffer->payload)[i];
			char get2 = ((char*)buffer->payload)[i+1];

			data[teller] = (get1 << 8)|get2;

			teller++;

		}


		juist_a = data[teller - 1];





		receivedLen += lengte;
		tcp_recved(tpcb,p->tot_len);





	//imageReceived = 1;

	char toPrint[50];
		sprintf(toPrint,"Len: %d",receivedLen);
		BSP_LCD_SetFont(&Font12);
		BSP_LCD_DisplayStringAtLine(20,toPrint);
		if(p->flags != 0)
		{
		//	tcp_recved(tpcb,receivedLen);
			char toPrint2[50] = "finito";
			BSP_LCD_SetFont(&Font12);
			BSP_LCD_DisplayStringAtLine(21,toPrint2);
			receivedLen = 0;
			teller = 0;
			pbuf_free(p);
			if(flag == 0)
			{
				WDA_LCD_DrawBitmap(data,x_offset1,y_offset,img_size,img_size,LTDC_PIXEL_FORMAT_RGB565);
				flag +=1;
				if(juist_a == 0x2040)
				{
					juist = 1;
				}
			}
			else if(flag == 1)
			{
				WDA_LCD_DrawBitmap(data,x_offset2,y_offset,img_size,img_size,LTDC_PIXEL_FORMAT_RGB565);
				flag +=1;

				if(juist_a == 0x2040)
				{
					juist = 2;
				}
			}
			else if(flag == 2)
			{
				WDA_LCD_DrawBitmap(data,x_offset3,y_offset,img_size,img_size,LTDC_PIXEL_FORMAT_RGB565);
				flag = 0;

				if(juist_a == 0x2040)
				{
					juist = 3;
				}
			}
			return ERR_OK;
		}



		pbuf_free(p);
		return ERR_OK;



}

err_t questionOntvangen(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
		char vraag[50] = "";
		strncpy(vraag,p->payload,p->tot_len);
		if(strcmp(vraag,"uit") == 0)
		{
			vFunctiesBackground();
			juist = 4;
		}
		else
		{
			BSP_LCD_SetFont(&Font16);
			BSP_LCD_DisplayStringAt(0,50,(uint8_t*)vraag,CENTER_MODE);
		}


		tcp_recved(tpcb,p->tot_len);
//		tcp_close(tpcb);
		pbuf_free(p);
		return ERR_OK;
}


uint8_t questionrequest(struct tcp_pcb *connectie,char vraag[2])
{

	connectie->flags = 0;
	char data[20] = "vraag/";
	strcat(data,vraag);
	tcp_write(connectie,data,sizeof(data),1);		// We sturen een q om een quote terug te krijgen
	tcp_recv(connectie,questionOntvangen);	// We willen nu wat data ontvangen
	while(!connectie->flags)
	{
		MX_LWIP_Process();
	}

	if(juist != 4)
	{
	char data2[20] = "foto0/";
	strcat(data2,vraag);
    connectie->flags=0;
	tcp_write(connectie,&data2,sizeof(data2),1);		// We sturen een q om een quote terug te krijgen
	tcp_recv(connectie,imageOntvangen);	// We willen nu wat data ontvangen
	while(!connectie->flags)
	{
		MX_LWIP_Process();
	}

    connectie->flags=0;
    data2[4] = '1';
	tcp_write(connectie,&data2,sizeof(data2),1);		// We sturen een q om een quote terug te krijgen
	tcp_recv(connectie,imageOntvangen);	// We willen nu wat data ontvangen
	while(!connectie->flags)
	{
		MX_LWIP_Process();
	}

    connectie->flags=0;
    data2[4] = '2';
	tcp_write(connectie,&data2,sizeof(data2),1);		// We sturen een q om een quote terug te krijgen
	tcp_recv(connectie,imageOntvangen);	// We willen nu wat data ontvangen
	while(!connectie->flags)
	{
		MX_LWIP_Process();
	}
	}

	return juist;
}

uint8_t ucFunctiesKies(uint16_t xpos,uint16_t ypos)
{
	  if(ypos > y_offset && ypos < (y_offset + img_size)) 			//juiste Y as
	  {
		  if(xpos > x_offset1 && xpos < (x_offset1 + img_size))		//antwoord 1
		  {
			  return 1;
		  }
		  else if(xpos > x_offset2 && xpos < (x_offset2 + img_size))	//antwoord 2
		  {
			  return 2;
		  }
		  else if(xpos > x_offset2 && xpos < (x_offset3 + img_size))	//antwoord 3
		  {
			  return 3;
		  }
		  else
		  {
			  return 0 ;
		  }

	  }
	  return 0 ;
}
